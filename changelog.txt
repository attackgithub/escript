[5.0.0.0]
ESCRIPT was splitted into two editions: Standard and Core
Now you can convert .es to .exe
Console is now invisible

Standard edition is better, have more functions (all functions are saved!) but works only on Windows and requires NET Framework 4.0
Core contains only basic methods. Can't be installed. Such methods as Windows Forms are excluded from it. Works on Linux-x64, Linux-ARM. Can be compiled for another platforms.

- Method: GetMethods - to get all available methods without using online docs
- Reworked start screen
- Now, install.es have UI for Standard and uses old console style for Core
- Fixed bug when Break was ignored in Methods

- I made ConsoleMessageBox, you can also redirect all your ShowMessageBox to console by setting "msgBoxToConsole" = "1"
Also this thing is used as default messageboxer in Core edition! =)

I wrote before, that I made install.es for two editions. Now, I removed code and left only UI code. Why? Because now Core edition supports MessageBoxes.

- Now if there is 'Main' method in script it will be started first of all
- Added method Restart [runAsAdmin = 0]
- Added methods GetProgramPath & GetPath [specialFolderName]
- Added method PathCombine path||path2
- Added method MakeDir [dirName] (return -2 if directory exists)
- Added some arguments to ESCRIPT, including "/?". 
- Rewriting install.es again. Now I can remove "InstallESCRIPT" method and "-installNext" argument from program. They are implemented now in script!
- Now you can add tabulation and spaces in your code (at the starting of lines).
- Script processing was optimized.
- Now you'll see used commands in .log file
- Now you can create script from template, use: CreateScript [fileName]
- Now you can access system variables, they will be added to set at the start
- Console is invisible now. It works only in Command Interpreter mode or when you use ShowConsole.
- To support non-console mode, I will add some nice windows.
- TextBox method: shows window with textbox and OK/Cancel buttons. Returns pressed button (OK/Cancel), textbox's content will write in $dialogInput
- Improved "help" command
- StringSplit method to split texts (see documentation\Commands for details)

- Added Lists (arrays?). Methods: 
ListCreate [variable]
ListEdit [variable]||[index]||[value]
ListAdd [variable]||[value]
ListRemove [variable]||[item]
ListReverse [variable]
ListClear [variable]
ListGetIndex [variable]||[value]
ListGetValue [variable]||[index]
ListCount [variable]

- Improved VarList method: now have one argument. If it's 1, returns list instead of writing it on screen
- Now you can call methods from code using '{' and '}' symbols. Examples:

echo ESCRIPT Version {Version major}.{Version minor}

- You can use # (sharp) symbol to skip processing arguments. Example:

echo {#Nice || string ||||\\\\ lol}

- You can set values for variables in another way. Example:

$variable=#Value (String)
$variable=version major

- Added system variable "varCanBeMethod". (0 is default value). If value is 1, when you asking for variables value, methods in it like {*} will work. Example:

$varCanBeMethod=0
$r=#{ver}
echo Version is: $r
[RESULT] Version is: {ver}
//////////////////////////
$varCanBeMethod=1
$r=#{ver}
echo Version is: $r
[DEBUG] Command (ver)
[RESULT] Version is: 5.0.0.0

- Improved For (for) method: added argument "Start Index" (first argument). Examples:

for 2||5||{#echo index: $for}||for

- Now you can add own code-methods runtime: MethodAdd [name]||[code], MethodGetCode, MethodRemove. Also you will see them in GetMethods command. Script usage example:

func Main
{
TheFunction a0||a1
}

func TheFunction arg0 arg1
{
color green
echo [$workingMethod] arg0: $arg0 arg1: $arg1
Break
}

- You can import (method: Import) compiled .NET-dlls with own functions or .ES-files with own methods. See details: documentation/Import
- Added "!=" condition to If method.
- Added method Count to count some integers. Example: Count 5||+||5
- Added some text methods: StringRemoveToChar, StringRemove

- SetStatus method: shows pretty async window with title, text and progress bar. See documentation/Commands for deatils.
- Ctrl+C (Cancel Key) now calls Break
- Added some Process methods, see doc Commands for details.
- Added GetKeyState, IsKeyDown, GetAsyncKeyState
- If you hold down Left Shift at the start ESCRIPT will enter Debug Mode.
- Added new GUI console because of Windows 10 compatibility issue
- Hold down right shift key to start default system console


[4.0.0.0]
- WARNING! set's arguments now must be splitted by ||
Please, fix it in your scripts.
- ESCRIPT variables was rewritten
Now it's a big class with nice functions
- Added methods:
ToLower, ToUpper, set (SetVar), unset (RemoveVar), VarCreated, VarEdited, VarReinit, VarCount, VarList
- now you can start command interpreter after script completion, just press C key

[3.1.0.0]
- fixed "break" function. Now it's Stop & Break method.
- added SetTitle (title) method
- added variables: workingScriptName and workingScriptFullName
- added ls (dir)
- added DWM method
- now when you start script window's title will be changed to it's name
- now you can add new lines! just write ~n~
- fixed bug: $splitArgs In String = Crash
- fixed bug: CheckUpdates Everywhere

[3.0.0.0]
- command processing method rewritten
- fixed bug when methods in fuctions was ignored
- added a lot of functions (see "doc||Commands" for details)
- updated documentation
- redesign
- output improved! now you know if something bad happend
- added Create/Read/Edit/Delete File Test

[2.0.0.0]
- added new methods
- fixed critical bugs
- optimized
- have a nice day
- ReadLine is ^ReadLine now
- Added ^ReadKey, see details in GetDocumentation Commands
- fixed critical error in TCPConnection class
- added icon
- added updating system

[1.0.0.0]
- command interpreter
- portable version
- built-in installer
- TCP connections
- events
- methods